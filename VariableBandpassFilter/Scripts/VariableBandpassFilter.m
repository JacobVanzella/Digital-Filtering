%%
%   Variable Bandpass Filter
%   By Jacob Vanzella
%
%   In this project a tuning fork recording will have noise added to it,
%   and the noise should subsequently be cleaned through digitial
%   filtering. The main undertaking in this project is the filter design
%   process. The filter design consideration will be justified here
%   briefly, and the implementation can be seen below, and in the
%   accompanying functions.
%   
%   By taking the Fourier transform of the tuning fork recording it can be
%   seen that the maximum frequency component Fm = 466 Hz, see the plot
%   generated by the analyzeAudio function call in 1.1. This 466 Hz
%   frequency is identical to the tuning for label. Knowing the frequency
%   that needs to be isolated, the design process can begin.
%   
%   The general steps of filter design are:
%   1.  Choosing a windowing function. In the project, a Kaiser window was
%       chosen as it provides an effective way of tailoring the response of
%       the filter by adjusting the alpha parameter and the low pass
%       cut-off frequency.
%   2.  Chosing the filter parameter M, such that the transition band is
%       less than or equal to the stop frequency minus the pass frequency
%       (dF <= Fstop - Fpass).
%   3.  Choose a cut-off frequency Fc for the truncated impulse response
%       such that Fc = (Fstop + Fpass)/2.
%   4.  Plot the frequecy magnitude to see resulting filter satisfies the
%       desired criteria.
%   5.  Adjust Fc and M to meet desired response. M should be minimized as
%       computationally heavy to have large values of M.
%
%   We are choosing a Kaiser window for easy filter tuning. The Kaiser
%   window is calculated in 1.2 through a function call to kaiserLPF. The
%   intent here is to use two Kaiser bandpass filters of different alpha
%   parameters to first maximize stopband attenuation, and then use a
%   narrow transition to clean up the signal. Then we will choose alpha1 =
%   7 for a large attenuation, and then alpha2 = 0, for a sharp transition.
%
%   For the filter parameter M should allow for the smallest possible
%   transition band. Since the ideal frequency is 466 Hz, and the intent is
%   to use a shifted low-pass filter, the cut-off frequency should be as
%   small as reasonably possible. However, the smaller Fc is chosen, the
%   greater the overattenuation of our desired signal occurs. We will start
%   with an Fc value of 10, and adjust it experimentally. Then lets select
%   parameter M for a 50 dB attenuation which is approximately 30.
% 


%% 1.0: Initialization of Workspace

clear; close all; clc;

% Load given data into program.
load('466-2.mat');

% Declaration of variables.
M   = 30;   % Filter order
Fc  = 20;    % Low pass filter cut-off frequency
Fm  = 466;  % Maximum frequency component
n   = linspace(0,2*M,2*M+1)';   % Time domain of low pass filter
delay   = Fm/Fs;% Frequency delay for low pass filter in Hz
alpha1  = 7.04;    % Kaiser window shape parameter for filter 1
alpha2  = 0;    % Kaiser window shape parameter for filter 2

%% 1.1: Analysis and Noise Addition of Signal

% Analyze given audio recording.
DFT_myRecording = analyzeAudio(myRecording, Fs, N);

% Add noise to audio recording.
myNoisyRec = myRecording + randn(N, 1);

% Analyze the noise added signal.
DFT_myNoisyRec = analyzeAudio(myNoisyRec, Fs, N);

%% 1.2: Filter Calculation

% Calculate Kaiser low pass filters used as noiseFilter arguments.
hKaiserLPF1 = kaiserLPF(M,N,Fs,Fc,alpha1);
hKaiserLPF2 = kaiserLPF(M,N,Fs,Fc,alpha2);

% Shift Kaiser low pass filters to act as bandpass filter.
%kaiserLPF1 = real(kaiserLPF1.*exp(j*2*pi*delay*n));
hKaiserLPF1 = real(hKaiserLPF1.*exp(j*2*pi*delay*n));
hKaiserLPF2 = real(hKaiserLPF2.*exp(j*2*pi*delay*n));

% Plot of the overlap of the shifted Kaiser filters.
frequency = linspace(-Fs/2 ,Fs/2,N)';
figure;
hold on;
plot(frequency, 20*log10(abs(fftshift(fft(hKaiserLPF1,N)))));
plot(frequency, 20*log10(abs(fftshift(fft(hKaiserLPF2,N)))));
xlabel('Frequency (Hz)');
ylabel('Frequency Amplitude (dB)');
title('Bandpass Overlap');
hold off;

%% 1.3: Noise Filtration and Filtered Signal Analysis

% Clean noise added signal using Kaiser low pass filter.
myCleanRec = noiseFilter(myNoisyRec, hKaiserLPF1, hKaiserLPF2);

% Analyze the cleaned signal.
analyzeAudio(myCleanRec, Fs, N);

%% 1.4: Playback Audio

% Uncomment block to play audio.
%Play original recording
%recObj.play();
%pause
%Play noise added recording
%noisyRec = audioplayer(myNoisyRec,Fs,Nbits);
%noisyRec.play();
%pause
%Play filtered recording
filteredRec = audioplayer(myCleanRec,Fs,Nbits);
filteredRec.play();